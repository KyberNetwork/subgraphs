specVersion: 0.0.2
description: DMM is a decentralized protocol for automated token exchange on Ethereum.
repository: https://github.com/dynamic-amm/dmm-subgraph
graft:
  base: QmciwdNZ59y1f7k4AjRPWLmCaCw6xjdx7RfP7gYcMfzvKB # Subgraph ID of base subgraph
  block: 16138000 # Block number
schema:
  file: ./schema.graphql
dataSources:
  {{#dmm_dynamic_fee_factory}}
  - kind: ethereum/contract
    name: DmmDynamicFeeFactory
    network: {{network}}
    source:
      address: '{{dmm_dynamic_fee_factory.address}}'
      abi: DmmDynamicFeeFactory
      startBlock: {{dmm_dynamic_fee_factory.startBlock}}  # contract creation block
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/factory.ts
      entities:   # defines which entities are written to stores
        - Pairs
        - Pools
        - Tokens
      abis:
        - name: DmmDynamicFeeFactory
          file: ./abis/DmmDynamicFeeFactory.json
        - name: ERC20
          file: ./abis/ERC20.json
        - name: ERC20SymbolBytes
          file: ./abis/ERC20SymbolBytes.json
        - name: ERC20NameBytes
          file: ./abis/ERC20NameBytes.json
      eventHandlers:
        - event: PoolCreated(indexed address,indexed address,address,uint32,uint256)
          handler: handlePoolCreated
        - event: SetFeeConfiguration(address,uint16)
          handler: handleSetFeeConfiguration
  {{/dmm_dynamic_fee_factory}}

  {{#dmm_static_fee_factory}}
  - kind: ethereum/contract
    name: DmmStaticFeeFactory
    network: {{network}}
    source:
      address: '{{dmm_static_fee_factory.address}}'
      abi: DmmStaticFeeFactory
      startBlock: {{dmm_static_fee_factory.startBlock}}  # contract creation block
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/factory.ts
      entities:   # defines which entities are written to stores
        - Pairs
        - Pools
        - Tokens
      abis:
        - name: DmmStaticFeeFactory
          file: ./abis/DmmStaticFeeFactory.json
        - name: ERC20
          file: ./abis/ERC20.json
        - name: ERC20SymbolBytes
          file: ./abis/ERC20SymbolBytes.json
        - name: ERC20NameBytes
          file: ./abis/ERC20NameBytes.json
      eventHandlers:
        - event: PoolCreated(indexed address,indexed address,address,uint32,uint24,uint256)
          handler: handlePoolCreated
        - event: SetFeeConfiguration(address,uint24)
          handler: handleSetFeeConfiguration
  {{/dmm_static_fee_factory}}

  {{#dmm_static_fee_factory_legacy}}
  - kind: ethereum/contract
    name: DmmStaticFeeFactoryLegacy
    network: {{network}}
    source:
      address: '{{dmm_static_fee_factory_legacy.address}}'
      abi: DmmStaticFeeFactoryLegacy
      startBlock: {{dmm_static_fee_factory_legacy.startBlock}}  # contract creation block
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/factory-legacy.ts
      entities:   # defines which entities are written to stores
        - Pairs
        - Pools
        - Tokens
      abis:
        - name: DmmStaticFeeFactoryLegacy
          file: ./abis/DmmStaticFeeFactoryLegacy.json
        - name: ERC20
          file: ./abis/ERC20.json
        - name: ERC20SymbolBytes
          file: ./abis/ERC20SymbolBytes.json
        - name: ERC20NameBytes
          file: ./abis/ERC20NameBytes.json
      eventHandlers:
        - event: PoolCreated(indexed address,indexed address,address,uint32,uint16,uint256)
          handler: handlePoolCreatedLegacy
        - event: SetFeeConfiguration(address,uint16)
          handler: handleSetFeeConfiguration
  {{/dmm_static_fee_factory_legacy}}

  {{#reward_locker}}
  - kind: ethereum/contract
    name: KyberRewardLocker
    network: {{network}}
    source:
      address: '{{address}}'
      abi: KyberRewardLocker
      startBlock: {{startBlock}}  # contract creation block
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/rewardLocker.ts
      entities:   # defines which entities are written to stores
        - RewardLocker
      abis:
        - name: KyberRewardLocker
          file: ./abis/KyberRewardLocker.json
        - name: KyberFairLaunch
          file: ./abis/KyberFairLaunch.json
      eventHandlers:
        - event: RewardContractAdded(indexed address,indexed address,bool)
          handler: handleRewardContractAdded
        - event: Vested(indexed address,indexed address,uint256,uint256)
          handler: handleVestd
  {{/reward_locker}}
  {{#reward_locker_v2}}
  - kind: ethereum/contract
    name: KyberRewardLockerV2
    network: {{network}}
    source:
      address: '{{address}}'
      abi: KyberRewardLockerV2
      startBlock: {{startBlock}}  # contract creation block
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/rewardLockerV2.ts
      entities: # defines which entities are written to stores
        - RewardLocker
      abis:
        - name: KyberRewardLockerV2
          file: ./abis/KyberRewardLockerV2.json
        - name: KyberFairLaunchV2
          file: ./abis/KyberFairLaunchV2.json
      eventHandlers:
        - event: RewardContractAdded(indexed address,indexed address,bool)
          handler: handleRewardContractAdded
        - event: Vested(indexed address,indexed address,uint256,uint256)
          handler: handleVestd
  {{/reward_locker_v2}}

templates:
  - kind: ethereum/contract
    name: Pool
    network: {{network}}
    source:
      abi: Pool
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/core.ts
      entities:
        - Pool
        - Token
      abis:
        - name: Pool
          file: ./abis/DmmPool.json
        - name: DynamicFeeFactory
          file: ./abis/DmmDynamicFeeFactory.json
        - name: StaticFeeFactory
          file: ./abis/DmmStaticFeeFactory.json
      eventHandlers:
        - event: Mint(indexed address,uint256,uint256)
          handler: handleMint
        - event: Burn(indexed address,uint256,uint256,indexed address)
          handler: handleBurn
        - event: Swap(indexed address,uint256,uint256,uint256,uint256,indexed address,uint256)
          handler: handleSwap
        - event: Transfer(indexed address,indexed address,uint256)
          handler: handleTransfer
        - event: Sync(uint256,uint256,uint256,uint256)
          handler: handleSync

  {{#reward_locker}}
  - kind: ethereum/contract
    name: KyberFairLaunch
    network: {{network}}
    source:
      abi: KyberFairLaunch
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/fairLaunch.ts
      entities:
        - Pool
        - Token
      abis:
        - name: KyberFairLaunch
          file: ./abis/KyberFairLaunch.json
      eventHandlers:
        - event: Deposit(indexed address,indexed uint256,indexed uint256,uint256)
          handler: handleDeposit
        - event: Harvest(indexed address,indexed uint256,indexed address,uint256,uint256)
          handler: handleHarvest
        - event: Withdraw(indexed address,indexed uint256,indexed uint256,uint256)
          handler: handleWithdraw
        - event: AddNewPool(indexed address,indexed uint32,indexed uint32,uint256[])
          handler: handleAddNewPool
  {{/reward_locker}}
  {{#reward_locker_v2}}
  - kind: ethereum/contract
    name: KyberFairLaunchV2
    network: {{network}}
    source:
      abi: KyberFairLaunchV2
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/fairLaunchV2.ts
      entities:
        - Pool
        - Token
      abis:
        - name: KyberFairLaunchV2
          file: ./abis/KyberFairLaunchV2.json
      eventHandlers:
        - event: Deposit(indexed address,indexed uint256,indexed uint256,uint256)
          handler: handleDeposit
        - event: Harvest(indexed address,indexed uint256,indexed address,uint256,uint256)
          handler: handleHarvest
        - event: Withdraw(indexed address,indexed uint256,indexed uint256,uint256)
          handler: handleWithdraw
        - event: AddNewPool(indexed address,indexed address,uint32,uint32,uint32)
          handler: handleAddNewPool
  {{/reward_locker_v2}}
