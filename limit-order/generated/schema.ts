// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class OrderFilled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OrderFilled entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OrderFilled must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OrderFilled", id.toString(), this);
    }
  }

  static load(id: string): OrderFilled | null {
    return changetype<OrderFilled | null>(store.get("OrderFilled", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get taker(): Bytes {
    let value = this.get("taker");
    return value!.toBytes();
  }

  set taker(value: Bytes) {
    this.set("taker", Value.fromBytes(value));
  }

  get orderHash(): Bytes {
    let value = this.get("orderHash");
    return value!.toBytes();
  }

  set orderHash(value: Bytes) {
    this.set("orderHash", Value.fromBytes(value));
  }

  get remaining(): BigInt {
    let value = this.get("remaining");
    return value!.toBigInt();
  }

  set remaining(value: BigInt) {
    this.set("remaining", Value.fromBigInt(value));
  }

  get makingAmount(): BigInt {
    let value = this.get("makingAmount");
    return value!.toBigInt();
  }

  set makingAmount(value: BigInt) {
    this.set("makingAmount", Value.fromBigInt(value));
  }

  get takingAmount(): BigInt {
    let value = this.get("takingAmount");
    return value!.toBigInt();
  }

  set takingAmount(value: BigInt) {
    this.set("takingAmount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value!.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }

  get tx(): Bytes {
    let value = this.get("tx");
    return value!.toBytes();
  }

  set tx(value: Bytes) {
    this.set("tx", Value.fromBytes(value));
  }
}

export class OrderCancelled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OrderCancelled entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OrderCancelled must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OrderCancelled", id.toString(), this);
    }
  }

  static load(id: string): OrderCancelled | null {
    return changetype<OrderCancelled | null>(store.get("OrderCancelled", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get maker(): Bytes {
    let value = this.get("maker");
    return value!.toBytes();
  }

  set maker(value: Bytes) {
    this.set("maker", Value.fromBytes(value));
  }

  get orderHash(): Bytes {
    let value = this.get("orderHash");
    return value!.toBytes();
  }

  set orderHash(value: Bytes) {
    this.set("orderHash", Value.fromBytes(value));
  }

  get remaining(): BigInt {
    let value = this.get("remaining");
    return value!.toBigInt();
  }

  set remaining(value: BigInt) {
    this.set("remaining", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get tx(): Bytes {
    let value = this.get("tx");
    return value!.toBytes();
  }

  set tx(value: Bytes) {
    this.set("tx", Value.fromBytes(value));
  }
}

export class NonceIncreased extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NonceIncreased entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NonceIncreased must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NonceIncreased", id.toString(), this);
    }
  }

  static load(id: string): NonceIncreased | null {
    return changetype<NonceIncreased | null>(store.get("NonceIncreased", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get maker(): Bytes {
    let value = this.get("maker");
    return value!.toBytes();
  }

  set maker(value: Bytes) {
    this.set("maker", Value.fromBytes(value));
  }

  get oldNonce(): BigInt {
    let value = this.get("oldNonce");
    return value!.toBigInt();
  }

  set oldNonce(value: BigInt) {
    this.set("oldNonce", Value.fromBigInt(value));
  }

  get newNonce(): BigInt {
    let value = this.get("newNonce");
    return value!.toBigInt();
  }

  set newNonce(value: BigInt) {
    this.set("newNonce", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get tx(): Bytes {
    let value = this.get("tx");
    return value!.toBytes();
  }

  set tx(value: Bytes) {
    this.set("tx", Value.fromBytes(value));
  }
}

export class OrderFilledRFQ extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OrderFilledRFQ entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OrderFilledRFQ must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OrderFilledRFQ", id.toString(), this);
    }
  }

  static load(id: string): OrderFilledRFQ | null {
    return changetype<OrderFilledRFQ | null>(store.get("OrderFilledRFQ", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get taker(): Bytes {
    let value = this.get("taker");
    return value!.toBytes();
  }

  set taker(value: Bytes) {
    this.set("taker", Value.fromBytes(value));
  }

  get orderHash(): Bytes {
    let value = this.get("orderHash");
    return value!.toBytes();
  }

  set orderHash(value: Bytes) {
    this.set("orderHash", Value.fromBytes(value));
  }

  get makingAmount(): BigInt {
    let value = this.get("makingAmount");
    return value!.toBigInt();
  }

  set makingAmount(value: BigInt) {
    this.set("makingAmount", Value.fromBigInt(value));
  }

  get takingAmount(): BigInt {
    let value = this.get("takingAmount");
    return value!.toBigInt();
  }

  set takingAmount(value: BigInt) {
    this.set("takingAmount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value!.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }

  get tx(): Bytes {
    let value = this.get("tx");
    return value!.toBytes();
  }

  set tx(value: Bytes) {
    this.set("tx", Value.fromBytes(value));
  }
}
